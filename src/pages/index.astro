---
import BaseLayout from "../layouts/BaseLayout.astro";
import HorizontalCard from "../components/HorizontalCard.astro";

const posts = (await Astro.glob("./blog/*.{md,mdx}")).sort(
  (a, b) => new Date(b.frontmatter.pubDate).valueOf() - new Date(a.frontmatter.pubDate).valueOf()
);

const last_posts = posts.slice(0, 3);
---

<style>
  
  .my-label {

  color: #000;
    text-transform: uppercase;
    font-size: 12px;
    font-weight: 600;
 }

</style>

<BaseLayout>

    <div class="pb-12 mt-5">
      <div class="text-xl py-1">Hey there ðŸ‘‹</div>
      <div class="text-5xl font-bold">I'm Eddie Naff</div>
      <div class="text-3xl py-3 font-bold">Software Engineer</div>
      <div class="py-2">
        <text class="text-lg">
          I make full-stack web apps!
          </text
        >
      </div>
      
    </div>

    <div>
      <div class="text-3xl w-full font-bold mb-2">Projects</div>
    </div>

    <HorizontalCard
      title="Demo Project 1"
      img="/post_img.webp"
      desc="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
      url="#"
      badge="NEW"
    />
    <div class="divider my-0"></div>
    <HorizontalCard
    title="Demo Project 2"
    img="/post_img.webp"
    desc="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
    url="#"
  />
    <div class="divider my-0"></div>
    <HorizontalCard
    title="Demo Project 3"
    img="/post_img.webp"
    desc="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
    url="#"
    badge="FOSS"
  />


    <div>
      <div class="text-3xl w-full font-bold mb-5 mt-10">Blog</div>
    </div>

    {
      last_posts.map((post) => (
        <HorizontalCard
          title={post.frontmatter.title}
          img={post.frontmatter.heroImage}
          desc={post.frontmatter.description}
          url={post.url}
          target="_self"
        />
        <div class="divider my-0"></div>
      ))
    }
    
    <div>
      <div class="text-3xl w-full font-bold mb-5 mt-10">Contact</div>
    </div>
    
      <form
      id="contact-form"
        name="contact"
        method="POST"
        action="http://192.168.1.16:8080/contact"
      >
      <div class="flex flex-col justify-center items-center">
    <div class="form-control w-full max-w-xs space-y-4">
      <div class="form-group"> 

      <label id="name-label" for="name" class="label my-label label-text">
        Full Name
      </label>
      <input id="name" name="name" type="text" aria-labelledby="name-label" required class="input input-bordered bg-white rounded-md w-full max-w-xs" />

      </div>
      
      <div class="form-group">

      <label id="email-label" for="email" class="label my-label">
        <span class="label-text">Email</span>
      </label>
      <input id="email" name="email" type="email" aria-labelledby="email-label" required class="input input-bordered bg-white  rounded-md w-full max-w-xs" />
      
      </div>
      
      <div class="form-group">  
        <label id="message-label" for="message" class="label my-label">
          <span class="label-text">Message</span>
        </label> 
        <textarea id="message" name="message" aria-labelledby="message-label" required minlength="15" maxlength="1000" class="textarea textarea-bordered bg-white rounded-md h-48 w-full" ></textarea>
       
      </div>
      <button type="submit" class="btn btn-primary rounded-md">Submit</button>

    </div>
  </div>
  </form>
  <script>
    import Pristine from "pristinejs";

const contactForm = document.getElementById('contact-form');
contactForm.addEventListener("submit", handleSubmit);

// Pristine.js config
let defaultConfig = {
    // class of the parent element where the error/success class is added
    classTo: 'form-group',
    errorClass: 'has-danger',
    successClass: 'has-success',
    // class of the parent element where error text element is appended
    errorTextParent: 'form-group',
    // type of element to create for the error text
    errorTextTag: 'span',
    // class of the error text element
    errorTextClass: 'text-rose-600' 
};

const pristine = new Pristine(contactForm, defaultConfig, true);


    function handleSubmit(event) {
      console.log("HANDLE SUBMIT")
  event.preventDefault()
  const valid = pristine.validate();
  console.log("VIEW VALID", {valid});
  if(!valid){
    console.log("VIEW ERRORS", {errors: pristine.getErrors()})
    const formErrors = pristine.getErrors();
    for (let errorIndex = 0; errorIndex < formErrors.length; errorIndex++) {
      const inputElement = formErrors[errorIndex].input;
      console.log("VIEW INPUT ELEMENT", {inputElement: inputElement.classList.contains("textarea")})

      // isolate the textarea
      if(inputElement.classList.contains("textarea")){
        inputElement.classList.add("textarea-error");
        // else if it's an input element...
      } else {
        inputElement.classList.add("input-error");
      }
    }
  }
    if(valid){
    event.currentTarget.submit();

    }
}
  </script>

</BaseLayout>
